Started by user [8mha:////4HRscR5Jzb6oA3266zNyHL0f0APpn0u/GzTuhwJwEfWMAAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzWEgZu/dLi1CL9xJTczDwAj6GcLcAAAAA=[0madmin
[8mha:////4IPnB3SQHpZn1xyl0hrvjWtvEGNaNkw4ct902NkdOFbFAAAAoh+LCAAAAAAAAP9tjTEOwjAQBM8BClpKHuFItIiK1krDC0x8GCfWnbEdkooX8TX+gCESFVvtrLSa5wtWKcKBo5UdUu8otU4GP9jS5Mixv3geZcdn2TIl9igbHBs2eJyx4YwwR1SwULBGaj0nRzbDRnX6rmuvydanHMu2V1A5c4MHCFXMWcf8hSnC9jqYxPTz/BXAFEIGsfuclm8zQVqFvQAAAA==[0m[Pipeline] Start of Pipeline
[8mha:////4KUauCq7fcqQCqP3oS21kAR/3ozBfpuMHTU2IYezi6x1AAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycohUghExsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jduZBmjwAAAAA==[0m[Pipeline] node
Running on [8mha:////4AF4Wp/PVnf6imFf5XFZNamqsW6GgqB6pUylqZQnwYeRAAAAph+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzeEgYp/eT83ILSktQi/fLMvJT88mJVI5fE9NS8En0AWcWLaM8AAAA=[0mwindows-agent in c:\jenkins\workspace\teszt
[8mha:////4NT+4n1sHleDLdwlv6MoMzuD7DaEdtPLt78ZY4qx4zsgAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0gA0xsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jfoP95RwAAAAA==[0m[Pipeline] {
[8mha:////4LE2jIKK0eTSCSBaz+YFKQ5VGUCNUDmGCNSwMmyJ7EN3AAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0gQkxsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jc09154wAAAAA==[0m[Pipeline] stage
[8mha:////4Ja1DpmLu67ZHLCoMsC3NpIASk2rNzUmKkR2A4YpFPccAAAApR+LCAAAAAAAAP9tjTEOwjAUQ3+KOrAycoh0ggUxsUZZOEFIQkgb/d8mKe3EibgadyBQiQlLlmxL1nu+oE4RjhQdby12HpP2vA+jK4lPFLtroIm3dOGaMFGwXNpJkrGnpUrKFhaxClYC1hZ1oOTRZdiIVt1VExS65pxj2Q4CKm8GeAAThZxVzN8yR9jeRpMIf5y/AJj7DGxXvP/86jek7ggRwAAAAA==[0m[Pipeline] { (Run Host PowerShell Script)
[8mha:////4EOBm4Z5zoMvq94jDHg/iKKt/SGnVjcsCcP9A0ffog74AAAAoh+LCAAAAAAAAP9tjTEOAiEURD9rLGwtPQTbaWGsbAmNJ0AWEZb8zwLrbuWJvJp3kLiJlZNMMm+a93rDOic4UbLcG+wdZu14DKOti0+U+lugiXu6ck2YKRguzSSpM+cFJRUDS1gDKwEbgzpQdmgLbIVXD9UGhba9lFS/o4DGdQM8gYlqLiqVL8wJdvexy4Q/z18BzLEA29ce4gfg7KmOvAAAAA==[0m[Pipeline] powershell
Starting Minikube...
* minikube v1.37.0 on Microsoft Windows 11 Pro 10.0.26100.6899 Build 26100.6899
  - KUBECONFIG=C:\Users\buszo\.kube\config
* Using the docker driver based on existing profile
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.48 ...
powershell.exe : ! Failing to connect to https://registry.k8s.io/ from inside the minikube container
At C:\jenkins\workspace\teszt@tmp\durable-e36f23f0\powershellWrapper.ps1:3 char:1
+ & powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -Comm ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (! Failing to co...ikube container:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
  - Using image docker.io/kubernetesui/dashboard:v2.7.0
  - Using image docker.io/kubernetesui/metrics-scraper:v1.0.8
* Some dashboard features require the metrics-server addon. To enable all features please run:

	minikube addons enable metrics-server

* Enabled addons: storage-provisioner, dashboard, default-storageclass

! C:\Program Files\Docker\Docker\resources\bin\kubectl.exe is version 1.32.2, which may have incompatibilities with Kubernetes 1.34.0.
  - Want kubectl v1.34.0? Try 'minikube kubectl -- get pods -A'
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
Starting Minikube dashboard in background...
Starting Minikube tunnel in background...
Changing directory to C:\Users\buszo\Desktop\prf_beadando\app\infra
Initializing Terraform...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/null from the dependency lock file
- Reusing previous version of hashicorp/kubernetes from the dependency lock file
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed hashicorp/null v3.2.4
- Using previously-installed hashicorp/kubernetes v2.38.0
- Using previously-installed kreuzwerker/docker v3.6.2

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
Applying Terraform configuration...

Terraform apply output:

 Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:   [32m+[0m create[0m  Terraform will perform the following actions:  [1m  # docker_image.client[0m will be created [0m  [32m+[0m[0m resource "docker_image" "client" {       [32m+[0m[0m id          = (known after apply)       [32m+[0m[0m image_id    = (known after apply)       [32m+[0m[0m name        = "fakeneptun-client:latest"       [32m+[0m[0m repo_digest = (known after apply)        [32m+[0m[0m build {           [32m+[0m[0m build_args     = {               [32m+[0m[0m "BACKEND_BASE" = "http://fakeneptun.com/api"             }           [32m+[0m[0m cache_from     = []           [32m+[0m[0m context        = "./../client"           [32m+[0m[0m dockerfile     = "Dockerfile"           [32m+[0m[0m extra_hosts    = []           [32m+[0m[0m remove         = true           [32m+[0m[0m security_opt   = []           [32m+[0m[0m tag            = []             [90m# (13 unchanged attributes hidden)[0m[0m         }     }  [1m  # docker_image.custom_mongo[0m will be created [0m  [32m+[0m[0m resource "docker_image" "custom_mongo" {       [32m+[0m[0m id          = (known after apply)       [32m+[0m[0m image_id    = (known after apply)       [32m+[0m[0m name        = "custom_mongo:latest"       [32m+[0m[0m repo_digest = (known after apply)        [32m+[0m[0m build {           [32m+[0m[0m cache_from     = []           [32m+[0m[0m context        = "./../database"           [32m+[0m[0m dockerfile     = "Dockerfile"           [32m+[0m[0m extra_hosts    = []           [32m+[0m[0m remove         = true           [32m+[0m[0m security_opt   = []           [32m+[0m[0m tag            = []             [90m# (13 unchanged attributes hidden)[0m[0m         }     }  [1m  # docker_image.server[0m will be created [0m  [32m+[0m[0m resource "docker_image" "server" {       [32m+[0m[0m id          = (known after apply)       [32m+[0m[0m image_id    = (known after apply)       [32m+[0m[0m name        = "fakeneptun-server:latest"       [32m+[0m[0m repo_digest = (known after apply)        [32m+[0m[0m build {           [32m+[0m[0m cache_from     = []           [32m+[0m[0m context        = "./../server"           [32m+[0m[0m dockerfile     = "Dockerfile"           [32m+[0m[0m extra_hosts    = []           [32m+[0m[0m remove         = true           [32m+[0m[0m security_opt   = []           [32m+[0m[0m tag            = []             [90m# (13 unchanged attributes hidden)[0m[0m         }     }  [1m  # kubernetes_config_map.nginx_conf[0m will be created [0m  [32m+[0m[0m resource "kubernetes_config_map" "nginx_conf" {       [32m+[0m[0m data = {           [32m+[0m[0m "default.conf" = <<-EOT                 server {                   listen 80;                   server_name fakeneptun.com;                                    location /api/ {                     rewrite ^/api(/.*)$ $1 break;                     proxy_pass http://backend.fakeneptun.svc.cluster.local:12212;                     proxy_set_header Host $host;                     proxy_set_header X-Real-IP $remote_addr;                   }                                    location / {                     rewrite ^([^.]*[^/])$ $1/ break;                     proxy_pass http://frontend.fakeneptun.svc.cluster.local;                     proxy_set_header Host $host;                     proxy_set_header X-Real-IP $remote_addr;                     proxy_redirect off;                   }                   }                                   server {                   server_name prometheus.fakeneptun.com;                                    location / {                     proxy_pass http://prometheus.fakeneptun.svc.cluster.local:9090;                   }                 }             EOT         }       [32m+[0m[0m id   = (known after apply)        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "nginx-conf"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }     }  [1m  # kubernetes_config_map.prometheus_config[0m will be created [0m  [32m+[0m[0m resource "kubernetes_config_map" "prometheus_config" {       [32m+[0m[0m data = {           [32m+[0m[0m "prometheus.yml" = <<-EOT                 global:                   scrape_interval: 5s                                  scrape_configs:                   - job_name: 'backend'                     metrics_path: /metrics                     static_configs:                       - targets: ['backend.fakeneptun.svc.cluster.local:12212']             EOT         }       [32m+[0m[0m id   = (known after apply)        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "prometheus-config"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }     }  [1m  # kubernetes_deployment.backend[0m will be created [0m  [32m+[0m[0m resource "kubernetes_deployment" "backend" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_for_rollout = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m labels           = {               [32m+[0m[0m "app" = "backend"             }           [32m+[0m[0m name             = "backend"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m min_ready_seconds         = 0           [32m+[0m[0m paused                    = false           [32m+[0m[0m progress_deadline_seconds = 600           [32m+[0m[0m replicas                  = "3"           [32m+[0m[0m revision_history_limit    = 10            [32m+[0m[0m selector {               [32m+[0m[0m match_labels = {                   [32m+[0m[0m "app" = "backend"                 }             }            [32m+[0m[0m strategy (known after apply)            [32m+[0m[0m template {               [32m+[0m[0m metadata {                   [32m+[0m[0m generation       = (known after apply)                   [32m+[0m[0m labels           = {                       [32m+[0m[0m "app" = "backend"                     }                   [32m+[0m[0m name             = (known after apply)                   [32m+[0m[0m resource_version = (known after apply)                   [32m+[0m[0m uid              = (known after apply)                 }               [32m+[0m[0m spec {                   [32m+[0m[0m automount_service_account_token  = true                   [32m+[0m[0m dns_policy                       = "ClusterFirst"                   [32m+[0m[0m enable_service_links             = true                   [32m+[0m[0m host_ipc                         = false                   [32m+[0m[0m host_network                     = false                   [32m+[0m[0m host_pid                         = false                   [32m+[0m[0m hostname                         = (known after apply)                   [32m+[0m[0m node_name                        = (known after apply)                   [32m+[0m[0m restart_policy                   = "Always"                   [32m+[0m[0m scheduler_name                   = (known after apply)                   [32m+[0m[0m service_account_name             = (known after apply)                   [32m+[0m[0m share_process_namespace          = false                   [32m+[0m[0m termination_grace_period_seconds = 30                    [32m+[0m[0m container {                       [32m+[0m[0m image                      = "fakeneptun-server:latest"                       [32m+[0m[0m image_pull_policy          = "IfNotPresent"                       [32m+[0m[0m name                       = "backend"                       [32m+[0m[0m stdin                      = false                       [32m+[0m[0m stdin_once                 = false                       [32m+[0m[0m termination_message_path   = "/dev/termination-log"                       [32m+[0m[0m termination_message_policy = (known after apply)                       [32m+[0m[0m tty                        = false                        [32m+[0m[0m env {                           [32m+[0m[0m name  = "DB_URI"                           [32m+[0m[0m value = "mongodb://root:password@mongo:27017/fakeNeptun?authSource=admin"                         }                        [32m+[0m[0m port {                           [32m+[0m[0m container_port = 12212                           [32m+[0m[0m protocol       = "TCP"                         }                        [32m+[0m[0m resources (known after apply)                     }                    [32m+[0m[0m image_pull_secrets (known after apply)                    [32m+[0m[0m readiness_gate (known after apply)                 }             }         }     }  [1m  # kubernetes_deployment.frontend[0m will be created [0m  [32m+[0m[0m resource "kubernetes_deployment" "frontend" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_for_rollout = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m labels           = {               [32m+[0m[0m "app" = "frontend"             }           [32m+[0m[0m name             = "frontend"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m min_ready_seconds         = 0           [32m+[0m[0m paused                    = false           [32m+[0m[0m progress_deadline_seconds = 600           [32m+[0m[0m replicas                  = "2"           [32m+[0m[0m revision_history_limit    = 10            [32m+[0m[0m selector {               [32m+[0m[0m match_labels = {                   [32m+[0m[0m "app" = "frontend"                 }             }            [32m+[0m[0m strategy (known after apply)            [32m+[0m[0m template {               [32m+[0m[0m metadata {                   [32m+[0m[0m generation       = (known after apply)                   [32m+[0m[0m labels           = {                       [32m+[0m[0m "app" = "frontend"                     }                   [32m+[0m[0m name             = (known after apply)                   [32m+[0m[0m resource_version = (known after apply)                   [32m+[0m[0m uid              = (known after apply)                 }               [32m+[0m[0m spec {                   [32m+[0m[0m automount_service_account_token  = true                   [32m+[0m[0m dns_policy                       = "ClusterFirst"                   [32m+[0m[0m enable_service_links             = true                   [32m+[0m[0m host_ipc                         = false                   [32m+[0m[0m host_network                     = false                   [32m+[0m[0m host_pid                         = false                   [32m+[0m[0m hostname                         = (known after apply)                   [32m+[0m[0m node_name                        = (known after apply)                   [32m+[0m[0m restart_policy                   = "Always"                   [32m+[0m[0m scheduler_name                   = (known after apply)                   [32m+[0m[0m service_account_name             = (known after apply)                   [32m+[0m[0m share_process_namespace          = false                   [32m+[0m[0m termination_grace_period_seconds = 30                    [32m+[0m[0m container {                       [32m+[0m[0m image                      = "fakeneptun-client:latest"                       [32m+[0m[0m image_pull_policy          = "IfNotPresent"                       [32m+[0m[0m name                       = "frontend"                       [32m+[0m[0m stdin                      = false                       [32m+[0m[0m stdin_once                 = false                       [32m+[0m[0m termination_message_path   = "/dev/termination-log"                       [32m+[0m[0m termination_message_policy = (known after apply)                       [32m+[0m[0m tty                        = false                        [32m+[0m[0m port {                           [32m+[0m[0m container_port = 4000                           [32m+[0m[0m protocol       = "TCP"                         }                        [32m+[0m[0m resources (known after apply)                     }                    [32m+[0m[0m image_pull_secrets (known after apply)                    [32m+[0m[0m readiness_gate (known after apply)                 }             }         }     }  [1m  # kubernetes_deployment.mongo[0m will be created [0m  [32m+[0m[0m resource "kubernetes_deployment" "mongo" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_for_rollout = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m labels           = {               [32m+[0m[0m "app" = "mongo"             }           [32m+[0m[0m name             = "mongo"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m min_ready_seconds         = 0           [32m+[0m[0m paused                    = false           [32m+[0m[0m progress_deadline_seconds = 600           [32m+[0m[0m replicas                  = "1"           [32m+[0m[0m revision_history_limit    = 10            [32m+[0m[0m selector {               [32m+[0m[0m match_labels = {                   [32m+[0m[0m "app" = "mongo"                 }             }            [32m+[0m[0m strategy (known after apply)            [32m+[0m[0m template {               [32m+[0m[0m metadata {                   [32m+[0m[0m generation       = (known after apply)                   [32m+[0m[0m labels           = {                       [32m+[0m[0m "app" = "mongo"                     }                   [32m+[0m[0m name             = (known after apply)                   [32m+[0m[0m resource_version = (known after apply)                   [32m+[0m[0m uid              = (known after apply)                 }               [32m+[0m[0m spec {                   [32m+[0m[0m automount_service_account_token  = true                   [32m+[0m[0m dns_policy                       = "ClusterFirst"                   [32m+[0m[0m enable_service_links             = true                   [32m+[0m[0m host_ipc                         = false                   [32m+[0m[0m host_network                     = false                   [32m+[0m[0m host_pid                         = false                   [32m+[0m[0m hostname                         = (known after apply)                   [32m+[0m[0m node_name                        = (known after apply)                   [32m+[0m[0m restart_policy                   = "Always"                   [32m+[0m[0m scheduler_name                   = (known after apply)                   [32m+[0m[0m service_account_name             = (known after apply)                   [32m+[0m[0m share_process_namespace          = false                   [32m+[0m[0m termination_grace_period_seconds = 30                    [32m+[0m[0m container {                       [32m+[0m[0m image                      = "custom_mongo:latest"                       [32m+[0m[0m image_pull_policy          = "IfNotPresent"                       [32m+[0m[0m name                       = "mongo"                       [32m+[0m[0m stdin                      = false                       [32m+[0m[0m stdin_once                 = false                       [32m+[0m[0m termination_message_path   = "/dev/termination-log"                       [32m+[0m[0m termination_message_policy = (known after apply)                       [32m+[0m[0m tty                        = false                        [32m+[0m[0m env {                           [32m+[0m[0m name  = "MONGO_INITDB_ROOT_USERNAME"                           [32m+[0m[0m value = "root"                         }                       [32m+[0m[0m env {                           [32m+[0m[0m name  = "MONGO_INITDB_ROOT_PASSWORD"                           [32m+[0m[0m value = "password"                         }                        [32m+[0m[0m port {                           [32m+[0m[0m container_port = 27017                           [32m+[0m[0m protocol       = "TCP"                         }                        [32m+[0m[0m resources (known after apply)                        [32m+[0m[0m volume_mount {                           [32m+[0m[0m mount_path        = "/data/db"                           [32m+[0m[0m mount_propagation = "None"                           [32m+[0m[0m name              = "mongo-data"                           [32m+[0m[0m read_only         = false                         }                     }                    [32m+[0m[0m image_pull_secrets (known after apply)                    [32m+[0m[0m readiness_gate (known after apply)                    [32m+[0m[0m volume {                       [32m+[0m[0m name = "mongo-data"                        [32m+[0m[0m persistent_volume_claim {                           [32m+[0m[0m claim_name = "mongo-pvc"                           [32m+[0m[0m read_only  = false                         }                     }                 }             }         }     }  [1m  # kubernetes_deployment.nginx[0m will be created [0m  [32m+[0m[0m resource "kubernetes_deployment" "nginx" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_for_rollout = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m labels           = {               [32m+[0m[0m "app" = "nginx-proxy"             }           [32m+[0m[0m name             = "nginx-proxy"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m min_ready_seconds         = 0           [32m+[0m[0m paused                    = false           [32m+[0m[0m progress_deadline_seconds = 600           [32m+[0m[0m replicas                  = "1"           [32m+[0m[0m revision_history_limit    = 10            [32m+[0m[0m selector {               [32m+[0m[0m match_labels = {                   [32m+[0m[0m "app" = "nginx-proxy"                 }             }            [32m+[0m[0m strategy (known after apply)            [32m+[0m[0m template {               [32m+[0m[0m metadata {                   [32m+[0m[0m generation       = (known after apply)                   [32m+[0m[0m labels           = {                       [32m+[0m[0m "app" = "nginx-proxy"                     }                   [32m+[0m[0m name             = (known after apply)                   [32m+[0m[0m resource_version = (known after apply)                   [32m+[0m[0m uid              = (known after apply)                 }               [32m+[0m[0m spec {                   [32m+[0m[0m automount_service_account_token  = true                   [32m+[0m[0m dns_policy                       = "ClusterFirst"                   [32m+[0m[0m enable_service_links             = true                   [32m+[0m[0m host_ipc                         = false                   [32m+[0m[0m host_network                     = false                   [32m+[0m[0m host_pid                         = false                   [32m+[0m[0m hostname                         = (known after apply)                   [32m+[0m[0m node_name                        = (known after apply)                   [32m+[0m[0m restart_policy                   = "Always"                   [32m+[0m[0m scheduler_name                   = (known after apply)                   [32m+[0m[0m service_account_name             = (known after apply)                   [32m+[0m[0m share_process_namespace          = false                   [32m+[0m[0m termination_grace_period_seconds = 30                    [32m+[0m[0m container {                       [32m+[0m[0m image                      = "nginx:1.25"                       [32m+[0m[0m image_pull_policy          = (known after apply)                       [32m+[0m[0m name                       = "nginx"                       [32m+[0m[0m stdin                      = false                       [32m+[0m[0m stdin_once                 = false                       [32m+[0m[0m termination_message_path   = "/dev/termination-log"                       [32m+[0m[0m termination_message_policy = (known after apply)                       [32m+[0m[0m tty                        = false                        [32m+[0m[0m port {                           [32m+[0m[0m container_port = 80                           [32m+[0m[0m protocol       = "TCP"                         }                        [32m+[0m[0m resources (known after apply)                        [32m+[0m[0m volume_mount {                           [32m+[0m[0m mount_path        = "/etc/nginx/conf.d"                           [32m+[0m[0m mount_propagation = "None"                           [32m+[0m[0m name              = "nginx-conf"                           [32m+[0m[0m read_only         = false                         }                     }                    [32m+[0m[0m image_pull_secrets (known after apply)                    [32m+[0m[0m readiness_gate (known after apply)                    [32m+[0m[0m volume {                       [32m+[0m[0m name = "nginx-conf"                        [32m+[0m[0m config_map {                           [32m+[0m[0m default_mode = "0644"                           [32m+[0m[0m name         = "nginx-conf"                         }                     }                 }             }         }     }  [1m  # kubernetes_deployment.prometheus[0m will be created [0m  [32m+[0m[0m resource "kubernetes_deployment" "prometheus" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_for_rollout = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m labels           = {               [32m+[0m[0m "app" = "prometheus"             }           [32m+[0m[0m name             = "prometheus"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m min_ready_seconds         = 0           [32m+[0m[0m paused                    = false           [32m+[0m[0m progress_deadline_seconds = 600           [32m+[0m[0m replicas                  = "1"           [32m+[0m[0m revision_history_limit    = 10            [32m+[0m[0m selector {               [32m+[0m[0m match_labels = {                   [32m+[0m[0m "app" = "prometheus"                 }             }            [32m+[0m[0m strategy (known after apply)            [32m+[0m[0m template {               [32m+[0m[0m metadata {                   [32m+[0m[0m generation       = (known after apply)                   [32m+[0m[0m labels           = {                       [32m+[0m[0m "app" = "prometheus"                     }                   [32m+[0m[0m name             = (known after apply)                   [32m+[0m[0m resource_version = (known after apply)                   [32m+[0m[0m uid              = (known after apply)                 }               [32m+[0m[0m spec {                   [32m+[0m[0m automount_service_account_token  = true                   [32m+[0m[0m dns_policy                       = "ClusterFirst"                   [32m+[0m[0m enable_service_links             = true                   [32m+[0m[0m host_ipc                         = false                   [32m+[0m[0m host_network                     = false                   [32m+[0m[0m host_pid                         = false                   [32m+[0m[0m hostname                         = (known after apply)                   [32m+[0m[0m node_name                        = (known after apply)                   [32m+[0m[0m restart_policy                   = "Always"                   [32m+[0m[0m scheduler_name                   = (known after apply)                   [32m+[0m[0m service_account_name             = (known after apply)                   [32m+[0m[0m share_process_namespace          = false                   [32m+[0m[0m termination_grace_period_seconds = 30                    [32m+[0m[0m container {                       [32m+[0m[0m args                       = [                           [32m+[0m[0m "--config.file=/etc/prometheus/prometheus.yml",                         ]                       [32m+[0m[0m image                      = "prom/prometheus:v2.53.0"                       [32m+[0m[0m image_pull_policy          = (known after apply)                       [32m+[0m[0m name                       = "prometheus"                       [32m+[0m[0m stdin                      = false                       [32m+[0m[0m stdin_once                 = false                       [32m+[0m[0m termination_message_path   = "/dev/termination-log"                       [32m+[0m[0m termination_message_policy = (known after apply)                       [32m+[0m[0m tty                        = false                        [32m+[0m[0m port {                           [32m+[0m[0m container_port = 9090                           [32m+[0m[0m protocol       = "TCP"                         }                        [32m+[0m[0m resources (known after apply)                        [32m+[0m[0m volume_mount {                           [32m+[0m[0m mount_path        = "/etc/prometheus/"                           [32m+[0m[0m mount_propagation = "None"                           [32m+[0m[0m name              = "config-volume"                           [32m+[0m[0m read_only         = false                         }                     }                    [32m+[0m[0m image_pull_secrets (known after apply)                    [32m+[0m[0m readiness_gate (known after apply)                    [32m+[0m[0m volume {                       [32m+[0m[0m name = "config-volume"                        [32m+[0m[0m config_map {                           [32m+[0m[0m default_mode = "0644"                           [32m+[0m[0m name         = "prometheus-config"                         }                     }                 }             }         }     }  [1m  # kubernetes_namespace.app[0m will be created [0m  [32m+[0m[0m resource "kubernetes_namespace" "app" {       [32m+[0m[0m id                               = (known after apply)       [32m+[0m[0m wait_for_default_service_account = false        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }     }  [1m  # kubernetes_persistent_volume_claim.mongo_pvc[0m will be created [0m  [32m+[0m[0m resource "kubernetes_persistent_volume_claim" "mongo_pvc" {       [32m+[0m[0m id               = (known after apply)       [32m+[0m[0m wait_until_bound = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "mongo-pvc"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m access_modes       = [               [32m+[0m[0m "ReadWriteOnce",             ]           [32m+[0m[0m storage_class_name = "standard"           [32m+[0m[0m volume_mode        = (known after apply)           [32m+[0m[0m volume_name        = (known after apply)            [32m+[0m[0m resources {               [32m+[0m[0m requests = {                   [32m+[0m[0m "storage" = "2Gi"                 }             }         }     }  [1m  # kubernetes_service.backend[0m will be created [0m  [32m+[0m[0m resource "kubernetes_service" "backend" {       [32m+[0m[0m id                     = (known after apply)       [32m+[0m[0m status                 = (known after apply)       [32m+[0m[0m wait_for_load_balancer = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "backend"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m allocate_load_balancer_node_ports = true           [32m+[0m[0m cluster_ip                        = (known after apply)           [32m+[0m[0m cluster_ips                       = (known after apply)           [32m+[0m[0m external_traffic_policy           = (known after apply)           [32m+[0m[0m health_check_node_port            = (known after apply)           [32m+[0m[0m internal_traffic_policy           = (known after apply)           [32m+[0m[0m ip_families                       = (known after apply)           [32m+[0m[0m ip_family_policy                  = (known after apply)           [32m+[0m[0m publish_not_ready_addresses       = false           [32m+[0m[0m selector                          = {               [32m+[0m[0m "app" = "backend"             }           [32m+[0m[0m session_affinity                  = "None"           [32m+[0m[0m type                              = "ClusterIP"            [32m+[0m[0m port {               [32m+[0m[0m node_port   = (known after apply)               [32m+[0m[0m port        = 12212               [32m+[0m[0m protocol    = "TCP"               [32m+[0m[0m target_port = "12212"             }            [32m+[0m[0m session_affinity_config (known after apply)         }     }  [1m  # kubernetes_service.frontend[0m will be created [0m  [32m+[0m[0m resource "kubernetes_service" "frontend" {       [32m+[0m[0m id                     = (known after apply)       [32m+[0m[0m status                 = (known after apply)       [32m+[0m[0m wait_for_load_balancer = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "frontend"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m allocate_load_balancer_node_ports = true           [32m+[0m[0m cluster_ip                        = (known after apply)           [32m+[0m[0m cluster_ips                       = (known after apply)           [32m+[0m[0m external_traffic_policy           = (known after apply)           [32m+[0m[0m health_check_node_port            = (known after apply)           [32m+[0m[0m internal_traffic_policy           = (known after apply)           [32m+[0m[0m ip_families                       = (known after apply)           [32m+[0m[0m ip_family_policy                  = (known after apply)           [32m+[0m[0m publish_not_ready_addresses       = false           [32m+[0m[0m selector                          = {               [32m+[0m[0m "app" = "frontend"             }           [32m+[0m[0m session_affinity                  = "None"           [32m+[0m[0m type                              = "ClusterIP"            [32m+[0m[0m port {               [32m+[0m[0m node_port   = (known after apply)               [32m+[0m[0m port        = 80               [32m+[0m[0m protocol    = "TCP"               [32m+[0m[0m target_port = "4000"             }            [32m+[0m[0m session_affinity_config (known after apply)         }     }  [1m  # kubernetes_service.mongo[0m will be created [0m  [32m+[0m[0m resource "kubernetes_service" "mongo" {       [32m+[0m[0m id                     = (known after apply)       [32m+[0m[0m status                 = (known after apply)       [32m+[0m[0m wait_for_load_balancer = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "mongo"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m allocate_load_balancer_node_ports = true           [32m+[0m[0m cluster_ip                        = (known after apply)           [32m+[0m[0m cluster_ips                       = (known after apply)           [32m+[0m[0m external_traffic_policy           = (known after apply)           [32m+[0m[0m health_check_node_port            = (known after apply)           [32m+[0m[0m internal_traffic_policy           = (known after apply)           [32m+[0m[0m ip_families                       = (known after apply)           [32m+[0m[0m ip_family_policy                  = (known after apply)           [32m+[0m[0m publish_not_ready_addresses       = false           [32m+[0m[0m selector                          = {               [32m+[0m[0m "app" = "mongo"             }           [32m+[0m[0m session_affinity                  = "None"           [32m+[0m[0m type                              = "ClusterIP"            [32m+[0m[0m port {               [32m+[0m[0m node_port   = (known after apply)               [32m+[0m[0m port        = 27017               [32m+[0m[0m protocol    = "TCP"               [32m+[0m[0m target_port = "27017"             }            [32m+[0m[0m session_affinity_config (known after apply)         }     }  [1m  # kubernetes_service.nginx[0m will be created [0m  [32m+[0m[0m resource "kubernetes_service" "nginx" {       [32m+[0m[0m id                     = (known after apply)       [32m+[0m[0m status                 = (known after apply)       [32m+[0m[0m wait_for_load_balancer = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "nginx-proxy"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m allocate_load_balancer_node_ports = true           [32m+[0m[0m cluster_ip                        = (known after apply)           [32m+[0m[0m cluster_ips                       = (known after apply)           [32m+[0m[0m external_traffic_policy           = (known after apply)           [32m+[0m[0m health_check_node_port            = (known after apply)           [32m+[0m[0m internal_traffic_policy           = (known after apply)           [32m+[0m[0m ip_families                       = (known after apply)           [32m+[0m[0m ip_family_policy                  = (known after apply)           [32m+[0m[0m publish_not_ready_addresses       = false           [32m+[0m[0m selector                          = {               [32m+[0m[0m "app" = "nginx-proxy"             }           [32m+[0m[0m session_affinity                  = "None"           [32m+[0m[0m type                              = "LoadBalancer"            [32m+[0m[0m port {               [32m+[0m[0m node_port   = (known after apply)               [32m+[0m[0m port        = 80               [32m+[0m[0m protocol    = "TCP"               [32m+[0m[0m target_port = "80"             }            [32m+[0m[0m session_affinity_config (known after apply)         }     }  [1m  # kubernetes_service.prometheus[0m will be created [0m  [32m+[0m[0m resource "kubernetes_service" "prometheus" {       [32m+[0m[0m id                     = (known after apply)       [32m+[0m[0m status                 = (known after apply)       [32m+[0m[0m wait_for_load_balancer = true        [32m+[0m[0m metadata {           [32m+[0m[0m generation       = (known after apply)           [32m+[0m[0m name             = "prometheus"           [32m+[0m[0m namespace        = "fakeneptun"           [32m+[0m[0m resource_version = (known after apply)           [32m+[0m[0m uid              = (known after apply)         }        [32m+[0m[0m spec {           [32m+[0m[0m allocate_load_balancer_node_ports = true           [32m+[0m[0m cluster_ip                        = (known after apply)           [32m+[0m[0m cluster_ips                       = (known after apply)           [32m+[0m[0m external_traffic_policy           = (known after apply)           [32m+[0m[0m health_check_node_port            = (known after apply)           [32m+[0m[0m internal_traffic_policy           = (known after apply)           [32m+[0m[0m ip_families                       = (known after apply)           [32m+[0m[0m ip_family_policy                  = (known after apply)           [32m+[0m[0m publish_not_ready_addresses       = false           [32m+[0m[0m selector                          = {               [32m+[0m[0m "app" = "prometheus"             }           [32m+[0m[0m session_affinity                  = "None"           [32m+[0m[0m type                              = "ClusterIP"            [32m+[0m[0m port {               [32m+[0m[0m node_port   = (known after apply)               [32m+[0m[0m port        = 9090               [32m+[0m[0m protocol    = "TCP"               [32m+[0m[0m target_port = "9090"             }            [32m+[0m[0m session_affinity_config (known after apply)         }     }  [1m  # null_resource.load_backend_image[0m will be created [0m  [32m+[0m[0m resource "null_resource" "load_backend_image" {       [32m+[0m[0m id = (known after apply)     }  [1m  # null_resource.load_custom_mongo[0m will be created [0m  [32m+[0m[0m resource "null_resource" "load_custom_mongo" {       [32m+[0m[0m id = (known after apply)     }  [1m  # null_resource.load_frontend_image[0m will be created [0m  [32m+[0m[0m resource "null_resource" "load_frontend_image" {       [32m+[0m[0m id = (known after apply)     }  [1mPlan:[0m 20 to add, 0 to change, 0 to destroy. [0m Changes to Outputs:   [32m+[0m[0m minikube_instructions = <<-EOT         1) NĂ©zd meg az external IP-t, amit az nginx kapott             kubectl get svc -n fakeneptun          2) Add hozzĂˇ ezeket a sorokat a /etc/hosts fĂˇjlhoz (Windows: C:/Windows/System32/drivers/etc/hosts)            <NGINX_IP> fakeneptun.com (pl.: 127.0.0.1 fakeneptun.com)            <NGINX_IP> prometheus.fakeneptun.com (pl.: 127.0.0.1 prometheus.fakeneptun.com)                      Ezek utĂˇn bĂ¶ngĂ©szĹ‘bĹ‘l elĂ©rhetĹ‘ az alkalmazĂˇs a http://fakeneptun.com cĂ­men            A prometheus pedig a http://prometheus.fakeneptun.com cĂ­men     EOT   [32m+[0m[0m nginx_nodeport        = (known after apply) [0m[1mkubernetes_namespace.app: Creating...[0m[0m [0m[1mdocker_image.client: Creating...[0m[0m [0m[1mdocker_image.server: Creating...[0m[0m [0m[1mdocker_image.custom_mongo: Creating...[0m[0m [0m[1mkubernetes_namespace.app: Creation complete after 0s [id=fakeneptun][0m [0m[1mkubernetes_config_map.nginx_conf: Creating...[0m[0m [0m[1mkubernetes_service.mongo: Creating...[0m[0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Creating...[0m[0m [0m[1mkubernetes_config_map.prometheus_config: Creating...[0m[0m [0m[1mkubernetes_service.prometheus: Creating...[0m[0m [0m[1mkubernetes_config_map.prometheus_config: Creation complete after 0s [id=fakeneptun/prometheus-config][0m [0m[1mkubernetes_config_map.nginx_conf: Creation complete after 0s [id=fakeneptun/nginx-conf][0m [0m[1mkubernetes_service.prometheus: Creation complete after 0s [id=fakeneptun/prometheus][0m [0m[1mkubernetes_service.mongo: Creation complete after 0s [id=fakeneptun/mongo][0m [0m[1mkubernetes_deployment.prometheus: Creating...[0m[0m [0m[1mdocker_image.custom_mongo: Creation complete after 1s [id=sha256:5a4eb88453986a8f5419957f18d2197727aeff2b27ca62543e8b099a4fe8d580custom_mongo:latest][0m [0m[1mnull_resource.load_custom_mongo: Creating...[0m[0m [0m[1mnull_resource.load_custom_mongo: Provisioning with 'local-exec'...[0m[0m [0m[1mnull_resource.load_custom_mongo (local-exec):[0m [0mExecuting: ["PowerShell" "-Command" "$ErrorActionPreference = \"Stop\"\r\n$MINIKUBE_IP = (minikube -p minikube ip)\r\nWrite-Output \"minikube ip: $MINIKUBE_IP\"\r\nminikube -p minikube image load custom_mongo:latest\r\n"] [0m[1mnull_resource.load_custom_mongo (local-exec):[0m [0mminikube ip: 192.168.49.2 [0m[1mdocker_image.client: Still creating... [00m10s elapsed][0m[0m [0m[1mdocker_image.server: Still creating... [00m10s elapsed][0m[0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Still creating... [00m10s elapsed][0m[0m [0m[1mkubernetes_deployment.prometheus: Still creating... [00m10s elapsed][0m[0m [0m[1mnull_resource.load_custom_mongo: Still creating... [00m10s elapsed][0m[0m [0m[1mdocker_image.client: Still creating... [00m20s elapsed][0m[0m [0m[1mdocker_image.server: Still creating... [00m20s elapsed][0m[0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Still creating... [00m20s elapsed][0m[0m [0m[1mkubernetes_deployment.prometheus: Still creating... [00m20s elapsed][0m[0m [0m[1mnull_resource.load_custom_mongo: Still creating... [00m20s elapsed][0m[0m [0m[1mdocker_image.client: Still creating... [00m30s elapsed][0m[0m [0m[1mdocker_image.server: Still creating... [00m30s elapsed][0m[0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Still creating... [00m30s elapsed][0m[0m [0m[1mkubernetes_deployment.prometheus: Still creating... [00m30s elapsed][0m[0m [0m[1mnull_resource.load_custom_mongo: Still creating... [00m30s elapsed][0m[0m [0m[1mdocker_image.client: Creation complete after 32s [id=sha256:612e807654843a6c47ca4c14a2b789e8302f37ad862cff7ed1db3391657b7897fakeneptun-client:latest][0m [0m[1mnull_resource.load_frontend_image: Creating...[0m[0m [0m[1mnull_resource.load_frontend_image: Provisioning with 'local-exec'...[0m[0m [0m[1mnull_resource.load_frontend_image (local-exec):[0m [0mExecuting: ["PowerShell" "-Command" "$ErrorActionPreference = \"Stop\"\r\n$MINIKUBE_IP = (minikube -p minikube ip)\r\nWrite-Output \"minikube ip: $MINIKUBE_IP\"\r\nminikube -p minikube image load fakeneptun-client:latest\r\n"] [0m[1mnull_resource.load_frontend_image (local-exec):[0m [0mminikube ip: 192.168.49.2 [0m[1mnull_resource.load_custom_mongo: Creation complete after 34s [id=3750216270696403124][0m [0m[1mkubernetes_deployment.prometheus: Creation complete after 35s [id=fakeneptun/prometheus][0m [0m[1mdocker_image.server: Creation complete after 38s [id=sha256:955d0d2b2fb83dd3b41907bb91f88e504ac11806bd8225964782c1bd86a17252fakeneptun-server:latest][0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Still creating... [00m40s elapsed][0m[0m [0m[1mnull_resource.load_frontend_image: Still creating... [00m10s elapsed][0m[0m [0m[1mnull_resource.load_frontend_image: Creation complete after 10s [id=1264381174999818302][0m [0m[1mkubernetes_service.frontend: Creating...[0m[0m [0m[1mkubernetes_service.frontend: Creation complete after 0s [id=fakeneptun/frontend][0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Still creating... [00m50s elapsed][0m[0m [0m[1mkubernetes_persistent_volume_claim.mongo_pvc: Creation complete after 52s [id=fakeneptun/mongo-pvc][0m [0m[1mkubernetes_deployment.mongo: Creating...[0m[0m [0m[1mkubernetes_deployment.mongo: Creation complete after 4s [id=fakeneptun/mongo][0m [0m[1mnull_resource.load_backend_image: Creating...[0m[0m [0m[1mnull_resource.load_backend_image: Provisioning with 'local-exec'...[0m[0m [0m[1mnull_resource.load_backend_image (local-exec):[0m [0mExecuting: ["PowerShell" "-Command" "$ErrorActionPreference = \"Stop\"\r\n$MINIKUBE_IP = (minikube -p minikube ip)\r\nWrite-Output \"minikube ip: $MINIKUBE_IP\"\r\nminikube -p minikube image load fakeneptun-server:latest\r\n"] [0m[1mnull_resource.load_backend_image (local-exec):[0m [0mminikube ip: 192.168.49.2 [0m[1mnull_resource.load_backend_image: Still creating... [00m10s elapsed][0m[0m [0m[1mnull_resource.load_backend_image: Creation complete after 13s [id=8866026753918794241][0m [0m[1mkubernetes_service.backend: Creating...[0m[0m [0m[1mkubernetes_deployment.backend: Creating...[0m[0m [0m[1mkubernetes_service.backend: Creation complete after 0s [id=fakeneptun/backend][0m [0m[1mkubernetes_deployment.backend: Creation complete after 2s [id=fakeneptun/backend][0m [0m[1mkubernetes_deployment.frontend: Creating...[0m[0m [0m[1mkubernetes_deployment.frontend: Creation complete after 3s [id=fakeneptun/frontend][0m [0m[1mkubernetes_service.nginx: Creating...[0m[0m [0m[1mkubernetes_deployment.nginx: Creating...[0m[0m [0m[1mkubernetes_service.nginx: Creation complete after 2s [id=fakeneptun/nginx-proxy][0m [0m[1mkubernetes_deployment.nginx: Still creating... [00m10s elapsed][0m[0m [0m[1mkubernetes_deployment.nginx: Creation complete after 16s [id=fakeneptun/nginx-proxy][0m [0m[1m[32m Apply complete! Resources: 20 added, 0 changed, 0 destroyed. [0m[0m[1m[32m Outputs:  [0mminikube_instructions = <<EOT 1) NĂ©zd meg az external IP-t, amit az nginx kapott     kubectl get svc -n fakeneptun  2) Add hozzĂˇ ezeket a sorokat a /etc/hosts fĂˇjlhoz (Windows: C:/Windows/System32/drivers/etc/hosts)    <NGINX_IP> fakeneptun.com (pl.: 127.0.0.1 fakeneptun.com)    <NGINX_IP> prometheus.fakeneptun.com (pl.: 127.0.0.1 prometheus.fakeneptun.com)      Ezek utĂˇn bĂ¶ngĂ©szĹ‘bĹ‘l elĂ©rhetĹ‘ az alkalmazĂˇs a http://fakeneptun.com cĂ­men    A prometheus pedig a http://prometheus.fakeneptun.com cĂ­men  EOT nginx_nodeport = 32268
[8mha:////4Bx8Rp417DERT3i6IlNYkpTtBr3Z/ftu26v1SwJ6vcLgAAAAoh+LCAAAAAAAAP9tjTEOAiEURD9rLGwtPQTbGRNjZUtoPAGyiLDkfxZYdytP5NW8g8RNrJxkknnTvNcb1jnBiZLl3mDvMGvHYxhtXXyi1N8CTdzTlWvCTMFwaSZJnTkvKKkYWMIaWAnYGNSBskNbYCu8eqg2KLTtpaT6HQU0rhvgCUxUc1GpfGFOsLuPXSb8ef4KYI6xADvU7j9Dg2gqvAAAAA==[0m[Pipeline] }
[8mha:////4BgQbJu94GR+eXal+dqw861ECgm8TkmRY6W8u9vxCEdvAAAAoh+LCAAAAAAAAP9tjTEOAiEURD9rLGwtPQRbWRhjZUtoPAGyiLDkfxZYdytP5NW8g8RNrJxkknnTvNcb1jnBiZLl3mDvMGvHYxhtXXyi1N8CTdzTlWvCTMFwaSZJnTkvKKkYWMIaWAnYGNSBskNbYCu8eqg2KLTtpaT6HQU0rhvgCUxUc1GpfGFOsLuPXSb8ef4KYI6xADvU7j9J+wGOvAAAAA==[0m[Pipeline] // stage
[8mha:////4AuuBaS/DEGzdNy2+Osj+01WaBNa+qw8Ej+PUjM69fqPAAAAox+LCAAAAAAAAP9tjTEOwjAQBDdBFLSUPMIBiQ5R0VppeIFJjHFi3QX7QlLxIr7GH4iIRMVWO9PM641lijhydKqx1HpKlVdd6N301MCxvQYeVMMXVTElDlaVdii5tqcZSxaLeVmOhcbKUhU4eXKCtW7MwxTBkCvOEid30Mh9fccTmZ7KYqJ8YYzY3Po6Mf06fwMYu06Q77aCbP8BhStF0r0AAAA=[0m[Pipeline] }
[8mha:////4ObWUOXf840t1zlYBqgufG3wWJUOeUsGnE8LL+OgpyoRAAAAoh+LCAAAAAAAAP9tjbEOgjAURS8YB1dHP6KEOBon14bFL6hQa6F5D9uHMPlF/pr/IJHEyTvdc5bzemOdIo4cnWotdZ5S7VUfBjc/NXLsroFH1fJF1UyJg1WVHStu7GnBisViWZZjpbGxVAdOnpxgq1vzMEUw5IqzxNkdNHLf3PFEpueymChfmCJ2t6FJTL/O3wCmvhfkZSnI9h+Wl0FxvQAAAA==[0m[Pipeline] // node
[8mha:////4LmtZahLTVKXWbMxLo1ZqLkAeVl3uSRAyzrUrn5nMhv5AAAAoh+LCAAAAAAAAP9tjTESgjAQRT84FraWHiKMtI6VbYbGE0SIMZDZxWQRKk/k1byDjMxY+av/XvNeb6xTxJGjU62lzlOqverD4OanRo7dNfCoWr6omilxsKqyY8WNPS1YsVgsy3KsNDaW6sDJkxNsdWsepgiGXHGWOLuDRu6bO57I9FwWE+ULU8TuNjSJ6df5G8DU94J8Xwqy8gPQ3eZBvQAAAA==[0m[Pipeline] End of Pipeline
Finished: SUCCESS
